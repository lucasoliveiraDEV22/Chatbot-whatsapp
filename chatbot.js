const http = require('http');
// Define a porta a partir da vari√°vel de ambiente ou usa a porta 3000 como padr√£o
const PORT = process.env.PORT || 3000;

// Cria um servidor b√°sico
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('Chatbot para WhatsApp esta rodando!');
});

// Faz o servidor escutar na porta especificada
server.listen(PORT, () => {
  console.log(`Servidor HTTP rodando na porta ${PORT}`);
});

// leitor de qr code
const express = require('express');
const qrcode = require('qrcode-terminal');
const { Client, LocalAuth } = require('whatsapp-web.js'); // Mudan√ßa Buttons
const fs = require('fs');
const client = new Client({
  authStrategy: new LocalAuth({ clientId: 'chatbot-dra-jessica' }) // Sess√£o ser√° salva automaticamente e identificador unico da sess√£o
});

// Vari√°vel para rastrear a disponibilidade de um atendente
let attendantAvailable = false;
// servi√ßo de leitura do qr code
client.on('qr', (qr) => {
  const qrcode = require('qrcode');
  console.log('Escaneie o QR Code abaixo para conectar:');

  // Gera uma vers√£o reduzida do QR Code e exibe como texto
  qrcode.toString(qr, { type: 'terminal', margin: 1 }, (err, output) => {
    if (err) {
      console.error('Erro ao gerar QR Code:', err);
    } else {
      console.log(output);
    }
  });
});
// apos isso ele diz que foi tudo certo
client.on('ready', () => {
  console.log('Tudo certo! WhatsApp conectado.');
});

// Evento disparado quando o cliente perde a conex√£o
client.on('disconnected', (reason) => {
  console.log('WhatsApp desconectado:', reason);
  console.log('Reconecte manualmente se necess√°rio.');
});
// E inicializa tudo
client.initialize();

const delay = (ms) => new Promise((res) => setTimeout(res, ms)); // Fun√ß√£o que usamos para criar o delay entre uma a√ß√£o e outra

// Vari√°vel para rastrear intera√ß√µes do paciente

const interactions = new Map(); //Armazena o estado de cada usu√°rio

async function handleOptions1(from) {
  await delay(3000);
  await client.sendMessage(
    from,
    'üî∞Durabilidade m√©dia de 3 a 5 anos, dependendo dos cuidados.\n\n üî∞Manuten√ß√£o a cada 6 meses\n\nüî∞Procedimento indolor\n\nüî∞Realizado em uma √∫nica sess√£o, levando de 3 a 4 horas.'
  );
}

async function handleOptions2(from) {
  await delay(3000);
  await client.sendMessage(
    from,
    '‚û°Ô∏è Nosso valor normal √© de R$ X por arcada, totalizando R$ Y.\n\n‚û°Ô∏è Valores promocionais:\n\n‚û°Ô∏è Facetas de resina: R$ A na parte superior (at√© 10 facetas) e R$ B na parte inferior (at√© 10 facetas) √† vista.\n\n‚û°Ô∏è Boca completa (at√© 20 dentes): R$ C.\n\n‚û°Ô∏è O valor pode ser parcelado em at√© X vezes no cart√£o de cr√©dito com taxa da maquina.\n\n‚û°Ô∏è Manuten√ß√£o a cada 6 meses, custo de R$ D (apenas para quem colocou facetas conosco).'
  );
}

async function handleOptions3(from) {
  await delay(3000);
  await client.sendMessage(
    from,
    'Agendamento üëáüèΩ\n\nAgende sua consulta pelo nosso WhatsApp, digitando 4.'
  );
}

async function handleOptions4(from) {
  await delay(3000);
  await client.sendMessage(
    from,
    'Transferindo para um atendente... Por favor, aguarde enquanto conectamos voc√™ com a nossa equipe.'
  );
  interactions.set(from, 'attendant'); // Marca o usu√°rio como "falando com atendente"
  attendantAvailable = true; // Indica que o atendente est√° dispon√≠vel
}

client.on('message', async (msg) => {
  const userId = msg.from;
  // Verifica se o menu inicial j√° foi enviado
  if (!interactions.has(userId)) {
    if (msg.body.match(/(menu|Menu|dia|tarde|noite|oi|Oi|Ol√°|ol√°|ola|Ola)/i)) {
      const chat = await msg.getChat();
      await delay(3000);
      await chat.sendStateTyping();
      await delay(3000);
      const contact = await msg.getContact();
      const name = contact.pushname;
      await client.sendMessage(
        userId,
        `Ol√°, ${
          name.split(' ')[0]
        }. Sou o assistente virtual do consult√≥rio X Facetas em Resina. Como posso ajud√°-lo hoje? Por favor, digite uma das op√ß√µes abaixo:\n\n1 - Como funciona?\n2 - Valores dos servi√ßos\n3 - Agendamento\n4 - Falar com um atendente`
      );
      interactions.set(userId, 'menu'); // Define estado inicial como "menu"
      return;
    }
  }

  const userState = interactions.get(userId);

  // Op√ß√µes do menu inicial

  if (userState === 'menu') {
    if (msg.body === '1') {
      await handleOptions1(userId);
    } else if (msg.body === '2') {
      await handleOptions2(userId);
    } else if (msg.body === '3') {
      await handleOptions3(userId);
    } else if (msg.body === '4') {
      await handleOptions4(userId);
    } else {
      await client.sendMessage(
        userId,
        'Desculpe, n√£o entendi sua mensagem. Por favor, escolha uma das op√ß√µes enviadas no menu: 1, 2, 3 ou 4.'
      );
    }
  } else if (userState === 'attendant') {
    if (msg.body.match(/(encerrar|Encerrar)/i)) {
      await client.sendMessage(
        userId,
        'Obrigado por utilizar nosso servi√ßo. At√© logo!'
      );
      interactions.delete(userId); // Remove o estado do usu√°rio
    } else if (!attendantAvailable) {
      await client.sendMessage(
        userId,
        'Por favor, aguarde. Um atendente j√° foi informado.'
      );
    }
  }
});
